<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.1">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="dell_compneuro_laptop" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="norm" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1440]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="3x3_practice_v3" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="show_rewards">
      <CodeComponent name="show_rew_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="op_rewB = 0&amp;#10;op_rewA = 0&amp;#10;op_rewC = 0&amp;#10;op_rewD = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="op_rewB = 0;&amp;#10;op_rewA = 0;&amp;#10;op_rewC = 0;&amp;#10;op_rewD = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="time_start = globalClock.getTime();&amp;#10;op_rewB = 0;&amp;#10;op_rewA = 0;&amp;#10;op_rewC = 0;&amp;#10;op_rewD = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="time_start = globalClock.getTime()&amp;#10;&amp;#10;op_rewB = 0&amp;#10;op_rewA = 0&amp;#10;op_rewC = 0&amp;#10;op_rewD = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="t_curr = globalClock.getTime()&amp;#10;tim = t_curr - time_start&amp;#10;if tim &lt; 1.5:&amp;#10;    op_rewA = 1&amp;#10;if (tim &gt; 1.5) and (tim &lt; 3):&amp;#10;    op_rewB = 1&amp;#10;    op_rewA = 0&amp;#10;if (tim &gt; 3) and (tim &lt; 4.5):&amp;#10;    op_rewB = 0&amp;#10;    op_rewC = 1&amp;#10;if (tim &gt; 4.5) and (tim &lt; 6):&amp;#10;    op_rewC = 0&amp;#10;    op_rewD = 1&amp;#10;if (tim &gt; 6) and (tim &lt; 7):&amp;#10;    op_rewD = 0&amp;#10;    op_rewA = 1&amp;#10;if (tim &gt; 7) and (tim &lt; 8):&amp;#10;    op_rewB = 1&amp;#10;    op_rewA = 0&amp;#10;if (tim &gt; 8) and (tim &lt; 9):&amp;#10;    op_rewB = 0&amp;#10;    op_rewC = 1&amp;#10;if tim &gt; 9:&amp;#10;    op_rewC = 0&amp;#10;    op_rewD = 1" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="t_curr = globalClock.getTime();&amp;#10;tim = (t_curr - time_start);&amp;#10;if ((tim &lt; 1.5)) {&amp;#10;    op_rewA = 1;&amp;#10;}&amp;#10;if (((tim &gt; 1.5) &amp;&amp; (tim &lt; 3))) {&amp;#10;    op_rewB = 1;&amp;#10;    op_rewA = 0;&amp;#10;}&amp;#10;if (((tim &gt; 3) &amp;&amp; (tim &lt; 4.5))) {&amp;#10;    op_rewB = 0;&amp;#10;    op_rewC = 1;&amp;#10;}&amp;#10;if (((tim &gt; 4.5) &amp;&amp; (tim &lt; 6))) {&amp;#10;    op_rewC = 0;&amp;#10;    op_rewD = 1;&amp;#10;}&amp;#10;if (((tim &gt; 6) &amp;&amp; (tim &lt; 7))) {&amp;#10;    op_rewD = 0;&amp;#10;    op_rewA = 1;&amp;#10;}&amp;#10;if (((tim &gt; 7) &amp;&amp; (tim &lt; 8))) {&amp;#10;    op_rewB = 1;&amp;#10;    op_rewA = 0;&amp;#10;}&amp;#10;if (((tim &gt; 8) &amp;&amp; (tim &lt; 9))) {&amp;#10;    op_rewB = 0;&amp;#10;    op_rewC = 1;&amp;#10;}&amp;#10;if ((tim &gt; 9)) {&amp;#10;    op_rewC = 0;&amp;#10;    op_rewD = 1;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="show_rew_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="sand_pirate">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/sand_3x3grid_pirate.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="sand_pirate" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10." valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="reward_A">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/coin.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="reward_A" valType="code" updates="None" name="name"/>
        <Param val="op_rewA" valType="num" updates="set every frame" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(rew_x_A, rew_y_A)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.13)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="reward_B">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/coin.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="reward_B" valType="code" updates="None" name="name"/>
        <Param val="op_rewB" valType="num" updates="set every frame" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(rew_x_B, rew_y_B)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.13)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="reward_C">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/coin.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="reward_C" valType="code" updates="None" name="name"/>
        <Param val="op_rewC" valType="num" updates="set every frame" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(rew_x_C, rew_y_C)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.13)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="reward_D">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/coin.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="reward_D" valType="code" updates="None" name="name"/>
        <Param val="op_rewD" valType="num" updates="set every frame" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(rew_x_D, rew_y_D)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.13)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="task">
      <CodeComponent name="task_code">
        <Param val="# add another output table.&amp;#10;# Ensure that relative paths start from the same directory as this script&amp;#10;_thisDir = os.path.dirname(os.path.abspath(__file__))&amp;#10;# info about the experiment session&amp;#10;&amp;#10;expInfo = {'participant': '', 'session': '001'}&amp;#10;expInfo['date'] = data.getDateStr()  # add a simple timestamp&amp;#10;&amp;#10;result_name = filename = _thisDir + os.sep + u'data/%s_%s_%s' % (expInfo['participant'], expInfo['date'], 'results')&amp;#10;resultTbl = data.ExperimentHandler(name='musicbox_practice', version='',&amp;#10;    extraInfo=expInfo, runtimeInfo=None,&amp;#10;    originPath='C:\\Users\\behrenslab-fmrib\\Documents\\Psychopy\\musicbox\\experiment\\3x3_practice_v2.py',&amp;#10;    savePickle=True, saveWideText=True,&amp;#10;    dataFileName=result_name)" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy.core import wait as wait&amp;#10;import random &amp;#10;&amp;#10;states = ['A', 'B', 'C', 'D']&amp;#10;field_nos = ['','','','']&amp;#10;&amp;#10;rew_visible = 1&amp;#10;&amp;#10;printing = 'nothing happened yet'&amp;#10;print(printing)&amp;#10;&amp;#10;curr_x = 0&amp;#10;curr_y = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {wait as wait} from 'psychopy/core';&amp;#10;import * as random from 'random';&amp;#10;var curr_x, curr_y, field_nos, printing, rew_visible, states;&amp;#10;states = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];&amp;#10;field_nos = [&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;];&amp;#10;curr_x = ((- 25) / 100);&amp;#10;curr_y = ((- 25) / 100);&amp;#10;rew_visible = 1;&amp;#10;printing = &quot;nothing happened yet&quot;;&amp;#10;console.log(printing);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="rew_visible = 0;&amp;#10;index_rew = [0, 0];&amp;#10;no_keys_pressed = [0];&amp;#10;nav_key.clearEvents();&amp;#10;loop_no = 0;&amp;#10;rew_x = [rew_x_A, rew_x_B, rew_x_C, rew_x_D];&amp;#10;rew_y = [rew_y_A, rew_y_B, rew_y_C, rew_y_D];&amp;#10;states = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];&amp;#10;field_nos = [&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;];&amp;#10;msg = &quot;&quot;;&amp;#10;psychoJS.experiment.nextEntry();&amp;#10;psychoJS.experiment.addData(&quot;start_ABCD_game&quot;, globalClock.getTime());&amp;#10;states = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];&amp;#10;field_nos = [&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;];&amp;#10;msg = &quot;&quot;;&amp;#10;interval = 0.05;&amp;#10;move_timer = [];&amp;#10;move_timer.push(globalClock.getTime());&amp;#10;move_counter = 0;&amp;#10;time_at_press = globalClock.getTime();&amp;#10;key1_press_trigger = 0;&amp;#10;key2_press_trigger = 0;&amp;#10;key3_press_trigger = 0;&amp;#10;key4_press_trigger = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="rew_visible = 0&amp;#10;A_visible = 0&amp;#10;index_rew = [0,0]&amp;#10;no_keys_pressed = [0]&amp;#10;&amp;#10;# flush out all potentially recorded button press events&amp;#10;nav_key_task.clearEvents()&amp;#10;loop_no = 0&amp;#10;&amp;#10;rew_x = [rew_x_A, rew_x_B, rew_x_C, rew_x_D]&amp;#10;rew_y = [rew_y_A, rew_y_B, rew_y_C, rew_y_D]&amp;#10;print(f'these are the new reward locations: xABCD {rew_x}, yABCD {rew_y}')&amp;#10;&amp;#10;#rew_x = [75/100, 75/100, -75/100, 75/100]&amp;#10;#rew_y = [75/100, -75/100, -25/100, -25/100]&amp;#10;states = ['A', 'B', 'C', 'D']&amp;#10;field_nos = ['','','','']&amp;#10;msg = ''&amp;#10;&amp;#10;thisExp.nextEntry()&amp;#10;thisExp.addData('next_task', globalClock.getTime())&amp;#10;states = ['A', 'B', 'C', 'D']&amp;#10;field_nos = ['','','','']&amp;#10;msg = ''&amp;#10;resultTbl.nextEntry()&amp;#10;resultTbl.addData('next_task', globalClock.getTime())&amp;#10;resultTbl.addData('round_no', Round)&amp;#10;resultTbl.addLoop(rep_runs)  # add the loop to the experiment&amp;#10;&amp;#10;# i have 2000ms. every 10 ms, I want to move this thing.&amp;#10;# this means that I will move the thing 200 times.&amp;#10;&amp;#10;interval = 0.05&amp;#10;move_timer = []&amp;#10;move_timer.append(globalClock.getTime())&amp;#10;move_counter = 0&amp;#10;time_at_press = globalClock.getTime()&amp;#10;key1_press_trigger = 0&amp;#10;key2_press_trigger = 0&amp;#10;key3_press_trigger = 0&amp;#10;key4_press_trigger = 0&amp;#10;&amp;#10;progress_bar_on = 0&amp;#10;progress_timer = []&amp;#10;progress_timer.append(globalClock.getTime())&amp;#10;reward_waiting = random.uniform(2.2, 3.5)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="loop_no += 1&amp;#10;#TRs = TR_count.getKeys(keyList = ['5'], clear = False)&amp;#10;#if len(TRs) &gt; 0:&amp;#10;#    print(TRs[-1].name)&amp;#10;&amp;#10;# first check if you have found the final reward.&amp;#10;if index_rew[-1] == len(states):&amp;#10;    reward_waiting = random.uniform(2.2, 3.5)&amp;#10;    print('now it should continue')&amp;#10;    wait(reward_waiting)&amp;#10;    break &amp;#10;&amp;#10;# activate these only if just starting or if a step has been made&amp;#10;if loop_no == 1: &amp;#10;    thisExp.addData('start_ABCD_screen', globalClock.getTime())&amp;#10;    resultTbl.addData('start_ABCD_screen', globalClock.getTime())&amp;#10;    #if len(TRs) &gt; 0:&amp;#10;        #thisExp.nextEntry()&amp;#10;        #thisExp.addData('first_task_TR', TRs[0].rt)&amp;#10;        #print(TRs.rt[0])&amp;#10;    curr_state = states[index_rew[-1]]&amp;#10;    curr_rew_x = rew_x[index_rew[-1]] &amp;#10;    curr_rew_y = rew_y[index_rew[-1]]&amp;#10;&amp;#10;&amp;#10;if (key1_press_trigger == 0) and (key2_press_trigger == 0) and (key3_press_trigger == 0) and (key4_press_trigger == 0):&amp;#10;    keys = nav_key_task.getKeys(keyList = ['1', '2', '3', '4'], clear = False)&amp;#10;    no_keys_pressed.append(len(keys))&amp;#10;&amp;#10;if len(keys) &gt; 0:&amp;#10;    # first check if you last found a reward. this means that you can't &amp;#10;    # react to key presses for a bit.&amp;#10;    if index_rew[-1] &gt; index_rew[-2]:&amp;#10;        # enter loop where you framewise increase the progress_height &amp;#10;        # until the reward_wait time is elapsed.&amp;#10;        if progress_bar_on == 0:&amp;#10;            reward_waiting = random.uniform(2.2, 3.5)&amp;#10;            last_height = height_progress&amp;#10;            time_rew_found = globalClock.getTime()&amp;#10;            progress_update = time_rew_found + interval&amp;#10;            progress_bar_on = 1&amp;#10;        if progress_timer[-1] &lt; time_rew_found+reward_waiting:&amp;#10;            progress_timer.append(globalClock.getTime())&amp;#10;            if progress_timer[-1] &gt;= progress_update:&amp;#10;                #it can be max 0.43 long. I have 3 repeats and 4 rews. &gt; increase by 0.035 each rew&amp;#10;                # I now have variable repeats. reps_per_run &amp;#10;                height_progress += ((0.41/(4*reps_per_run))/(reward_waiting/interval))&amp;#10;                progress_update += interval #increment by 100ms&amp;#10;        if progress_timer[-1] &gt;= time_rew_found+reward_waiting:&amp;#10;            height_progress = last_height + (0.41/(4*reps_per_run))&amp;#10;            progress_bar_on = 0&amp;#10;            print('done progress bar update')&amp;#10;            # and save that you made a step.&amp;#10;            thisExp.addData('t_reward_afterwait', globalClock.getTime())&amp;#10;            resultTbl.addData('t_reward_afterwait', globalClock.getTime())&amp;#10;            # and make it invisible again&amp;#10;            rew_visible = 0&amp;#10;            A_visible = 0&amp;#10;            # and add the same last value, so it wouldn't enter this loop again.&amp;#10;            index_rew.append(index_rew[-1])&amp;#10;            # and update the reward!! now off to find the next one.&amp;#10;            curr_state = states[index_rew[-1]]&amp;#10;            curr_rew_x = rew_x[index_rew[-1]] &amp;#10;            curr_rew_y = rew_y[index_rew[-1]]&amp;#10;            print(f'Reward found and waited! These should all be 0: key 1:{key1_press_trigger} key 2:{key2_press_trigger} key3:{key3_press_trigger} key 4:{key4_press_trigger}')&amp;#10;            print(f'this is current x: {curr_x}, reward x: {curr_rew_x}, and current y: {curr_y}, reward y: {curr_rew_y}.')&amp;#10;    # if you didnt last found a reward, you can check for key presses.   &amp;#10;    # then check if a new key has been pressed or if we are still updating the position.&amp;#10;    elif (no_keys_pressed[-1] &gt; no_keys_pressed[-2]) or (key1_press_trigger == 1) or (key2_press_trigger == 1) or (key3_press_trigger == 1) or (key4_press_trigger == 1):&amp;#10;        # check which key has been pressed&amp;#10;        #define how long the steps are supposed to be&amp;#10;        if (keys[-1].name == '1') or (key1_press_trigger == 1):&amp;#10;            if (curr_x&gt; -21/100):&amp;#10;                key1_press_trigger = 1&amp;#10;                if move_counter == 0:&amp;#10;                    last_x = curr_x&amp;#10;                    time_at_press = globalClock.getTime()&amp;#10;                    update_timer = time_at_press + interval&amp;#10;                    move_counter = 1&amp;#10;                    isi = random.uniform(1.5, 2.5)&amp;#10;                    thisExp.addData('length_step', isi)&amp;#10;                    resultTbl.addData('length_step', isi)&amp;#10;                    print(isi)&amp;#10;                if move_timer[-1] &lt; time_at_press+isi:&amp;#10;                    move_timer.append(globalClock.getTime())&amp;#10;                    if move_timer[-1] &gt;= update_timer:&amp;#10;                        curr_x -= ((21/100)/(isi/interval))&amp;#10;                        update_timer += interval #increment by 100ms&amp;#10;                        if curr_x &lt; -21/100:&amp;#10;                            curr_x = -21/100&amp;#10;                if move_timer[-1] &gt;= time_at_press+isi:&amp;#10;                    curr_x = last_x - 21/100&amp;#10;                    move_counter = 0&amp;#10;                    key1_press_trigger = 0&amp;#10;                    print('done moving 1')&amp;#10;                    print(f'this is current x: {curr_x}, reward x: {curr_rew_x}, and current y: {curr_y}, reward y: {curr_rew_y}.')&amp;#10;                    # and save that you made a step.&amp;#10;                    thisExp.nextEntry()&amp;#10;                    thisExp.addData('curr_loc_x', curr_x)&amp;#10;                    thisExp.addData('curr_loc_y', curr_y)&amp;#10;                    thisExp.addData('t_step_from_start_currrun', keys[-1].rt)&amp;#10;                    thisExp.addData('t_step_tglobal', globalClock.getTime())&amp;#10;                    resultTbl.nextEntry()&amp;#10;                    resultTbl.addData('curr_loc_x', curr_x)&amp;#10;                    resultTbl.addData('curr_loc_y', curr_y)&amp;#10;                    resultTbl.addData('curr_rew_x', curr_rew_x)&amp;#10;                    resultTbl.addData('curr_rew_y', curr_rew_y)&amp;#10;                    resultTbl.addData('t_step_since_curr_run', keys[-1].rt)&amp;#10;                    resultTbl.addData('t_step_tglobal', globalClock.getTime())&amp;#10;                    resultTbl.addData('repeat', rep_runs.thisRepN)&amp;#10;        # check which key has been pressed&amp;#10;        if (keys[-1].name == '2') or (key2_press_trigger == 1):&amp;#10;            if curr_y &lt; 29/100:&amp;#10;                key2_press_trigger = 1&amp;#10;                if move_counter == 0:&amp;#10;                    last_y = curr_y&amp;#10;                    time_at_press = globalClock.getTime()&amp;#10;                    update_timer = time_at_press + interval&amp;#10;                    move_counter = 1&amp;#10;                    isi = random.uniform(1.5, 2.5)&amp;#10;                    thisExp.addData('length_step', isi)&amp;#10;                    resultTbl.addData('length_step', isi)&amp;#10;                    print(isi)&amp;#10;                if move_timer[-1] &lt; time_at_press+isi:&amp;#10;                    move_timer.append(globalClock.getTime())&amp;#10;                    if move_timer[-1] &gt;= update_timer:&amp;#10;                        curr_y += ((29/100)/(isi/interval))&amp;#10;                        update_timer += interval #increment by 100ms&amp;#10;                        if curr_y &gt; 29/100:&amp;#10;                            curr_y = 29/100&amp;#10;                if move_timer[-1] &gt;= time_at_press+isi:&amp;#10;                    curr_y = last_y + 29/100&amp;#10;                    move_counter = 0&amp;#10;                    key2_press_trigger = 0&amp;#10;                    print('done moving 2')&amp;#10;                    print(f'this is current x: {curr_x}, reward x: {curr_rew_x}, and current y: {curr_y}, reward y: {curr_rew_y}.')&amp;#10;                    # and save that you made a step.&amp;#10;                    thisExp.nextEntry()&amp;#10;                    thisExp.addData('curr_loc_x', curr_x)&amp;#10;                    thisExp.addData('curr_loc_y', curr_y)&amp;#10;                    thisExp.addData('t_step_from_start_currrun', keys[-1].rt)&amp;#10;                    thisExp.addData('t_step_tglobal', globalClock.getTime())&amp;#10;                    resultTbl.nextEntry()&amp;#10;                    resultTbl.addData('curr_loc_x', curr_x)&amp;#10;                    resultTbl.addData('curr_loc_y', curr_y)&amp;#10;                    resultTbl.addData('curr_rew_x', curr_rew_x)&amp;#10;                    resultTbl.addData('curr_rew_y', curr_rew_y)&amp;#10;                    resultTbl.addData('t_step_since_curr_run', keys[-1].rt)&amp;#10;                    resultTbl.addData('t_step_tglobal', globalClock.getTime())&amp;#10;        # check which key had been pressed&amp;#10;        if (keys[-1].name == '3') or (key3_press_trigger == 1):&amp;#10;            if curr_y &gt; -29/100:&amp;#10;                key3_press_trigger = 1&amp;#10;                if move_counter == 0:&amp;#10;                    last_y = curr_y&amp;#10;                    time_at_press = globalClock.getTime()&amp;#10;                    update_timer = time_at_press + interval&amp;#10;                    move_counter = 1&amp;#10;                    isi = random.uniform(1.5, 2.5)&amp;#10;                    thisExp.addData('length_step', isi)&amp;#10;                    resultTbl.addData('length_step', isi)&amp;#10;                    print(isi)&amp;#10;                if move_timer[-1] &lt; time_at_press+isi:&amp;#10;                    move_timer.append(globalClock.getTime())&amp;#10;                    if move_timer[-1] &gt;= update_timer:&amp;#10;                        curr_y -= ((29/100)/(isi/interval))&amp;#10;                        update_timer += interval #increment by 100ms&amp;#10;                        if curr_y &lt; -29/100:&amp;#10;                            curr_y = -29/100&amp;#10;                if move_timer[-1] &gt;= time_at_press+isi:&amp;#10;                    curr_y = last_y - 29/100&amp;#10;                    move_counter = 0&amp;#10;                    key3_press_trigger = 0&amp;#10;                    print('done moving 3')&amp;#10;                    print(f'this is current x: {curr_x}, reward x: {curr_rew_x}, and current y: {curr_y}, reward y: {curr_rew_y}.')&amp;#10;                    # and save that you made a step.&amp;#10;                    thisExp.nextEntry()&amp;#10;                    thisExp.addData('curr_loc_x', curr_x)&amp;#10;                    thisExp.addData('curr_loc_y', curr_y)&amp;#10;                    thisExp.addData('t_step_from_start_currrun', keys[-1].rt)&amp;#10;                    thisExp.addData('t_step_tglobal', globalClock.getTime())&amp;#10;                    resultTbl.nextEntry()&amp;#10;                    resultTbl.addData('curr_loc_x', curr_x)&amp;#10;                    resultTbl.addData('curr_loc_y', curr_y)&amp;#10;                    resultTbl.addData('curr_rew_x', curr_rew_x)&amp;#10;                    resultTbl.addData('curr_rew_y', curr_rew_y)&amp;#10;                    resultTbl.addData('t_step_since_curr_run', keys[-1].rt)&amp;#10;                    resultTbl.addData('t_step_tglobal', globalClock.getTime())&amp;#10;        # check which keys have been pressed&amp;#10;        if (keys[-1].name == '4') or (key4_press_trigger == 1):&amp;#10;            if curr_x &lt; 21/100:&amp;#10;                key4_press_trigger = 1&amp;#10;                if move_counter == 0:&amp;#10;                    last_x = curr_x&amp;#10;                    time_at_press = globalClock.getTime()&amp;#10;                    update_timer = time_at_press + interval&amp;#10;                    move_counter = 1&amp;#10;                    isi = random.uniform(1.5, 2.5)&amp;#10;                    thisExp.addData('length_step', isi)&amp;#10;                    resultTbl.addData('length_step', isi)&amp;#10;                    print(isi)&amp;#10;                if move_timer[-1] &lt; time_at_press+isi:&amp;#10;                    move_timer.append(globalClock.getTime())&amp;#10;                    if move_timer[-1] &gt;= update_timer:&amp;#10;                        curr_x += ((21/100)/(isi/interval))&amp;#10;                        update_timer += interval #increment by 100ms&amp;#10;                        if curr_x &gt; 21/100:&amp;#10;                            curr_x = 21/100&amp;#10;                if move_timer[-1] &gt;= time_at_press+isi:&amp;#10;                    curr_x = last_x + 21/100&amp;#10;                    move_counter = 0&amp;#10;                    key4_press_trigger = 0&amp;#10;                    print('done moving 4')&amp;#10;                    print(f'this is current x: {curr_x}, reward x: {curr_rew_x}, and current y: {curr_y}, reward y: {curr_rew_y}.')&amp;#10;                    # and save that you made a step.&amp;#10;                    thisExp.nextEntry()&amp;#10;                    thisExp.addData('curr_loc_x', curr_x)&amp;#10;                    thisExp.addData('curr_loc_y', curr_y)&amp;#10;                    thisExp.addData('t_step_from_start_currrun', keys[-1].rt)&amp;#10;                    thisExp.addData('t_step_tglobal', globalClock.getTime())&amp;#10;                    resultTbl.nextEntry()&amp;#10;                    resultTbl.addData('curr_loc_x', curr_x)&amp;#10;                    resultTbl.addData('curr_loc_y', curr_y)&amp;#10;                    resultTbl.addData('curr_rew_x', curr_rew_x)&amp;#10;                    resultTbl.addData('curr_rew_y', curr_rew_y)&amp;#10;                    resultTbl.addData('t_step_since_curr_run', keys[-1].rt)&amp;#10;                    resultTbl.addData('t_step_tglobal', globalClock.getTime())&amp;#10;                    &amp;#10;        # then check if reward location and curr loc are the same&amp;#10;        if (curr_x == curr_rew_x) and (curr_y == curr_rew_y):&amp;#10;            # display something if it's A&amp;#10;            if (curr_rew_x == rew_x_A) and (curr_rew_y == rew_y_A):&amp;#10;                A_visible = 1&amp;#10;            # go to next reward&amp;#10;            index_rew.append(index_rew[-1]+1)&amp;#10;            print('found reward')&amp;#10;            # show the reward!&amp;#10;            rew_visible = 1&amp;#10;            thisExp.addData('rew_loc_x', curr_rew_x)&amp;#10;            thisExp.addData('rew_loc_y', curr_rew_y)&amp;#10;            thisExp.addData('t_reward_start', globalClock.getTime())&amp;#10;            thisExp.addData('reward_delay', reward_waiting)&amp;#10;            resultTbl.addData('rew_loc_x', curr_rew_x)&amp;#10;            resultTbl.addData('rew_loc_y', curr_rew_y)&amp;#10;            resultTbl.addData('t_reward_start', globalClock.getTime())&amp;#10;            resultTbl.addData('reward_delay', reward_waiting)&amp;#10;            progress1 = 0&amp;#10;&amp;#10;# check if the safety key has been pressed&amp;#10;safety_key = break_key.getKeys(keyList = ['0'], clear = False)&amp;#10;if len(safety_key) &gt; 0:&amp;#10;    curr_x = 0&amp;#10;    curr_y = 0&amp;#10;    &amp;#10;    &amp;#10;# then let everything update all the shapes." valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="loop_no += 1;&amp;#10;if ((index_rew.slice((- 1))[0] === states.length)) {&amp;#10;    reward_waiting = random.uniform(2.2, 3.5);&amp;#10;    wait(reward_waiting);&amp;#10;    break;&amp;#10;}&amp;#10;if ((loop_no === 1)) {&amp;#10;    psychoJS.experiment.nextEntry();&amp;#10;    psychoJS.experiment.addData(&quot;start_finding_rewards&quot;, globalClock.getTime());&amp;#10;    curr_state = states[index_rew.slice((- 1))[0]];&amp;#10;    curr_rew_x = rew_x[index_rew.slice((- 1))[0]];&amp;#10;    curr_rew_y = rew_y[index_rew.slice((- 1))[0]];&amp;#10;}&amp;#10;isi = random.uniform(1.5, 2.5);&amp;#10;if (((((key1_press_trigger === 0) &amp;&amp; (key2_press_trigger === 0)) &amp;&amp; (key3_press_trigger === 0)) &amp;&amp; (key4_press_trigger === 0))) {&amp;#10;    keys = nav_key_task.getKeys({&quot;keyList&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;], &quot;clear&quot;: false});&amp;#10;    no_keys_pressed.push(keys.length);&amp;#10;}&amp;#10;if ((keys.length &gt; 0)) {&amp;#10;    if ((index_rew.slice((- 1))[0] &gt; index_rew.slice((- 2))[0])) {&amp;#10;        wait(2.5);&amp;#10;        msg = &quot;&quot;;&amp;#10;        psychoJS.experiment.addData(&quot;t_reward_afterwait&quot;, globalClock.getTime());&amp;#10;        rew_visible = 0;&amp;#10;        index_rew.push(index_rew.slice((- 1))[0]);&amp;#10;        curr_state = states[index_rew.slice((- 1))[0]];&amp;#10;        curr_rew_x = rew_x[index_rew.slice((- 1))[0]];&amp;#10;        curr_rew_y = rew_y[index_rew.slice((- 1))[0]];&amp;#10;        console.log(`Reward found and waited! These should all be 0: key 1:${key1_press_trigger} key 2:${key2_press_trigger} key3:${key3_press_trigger} key 4:${key4_press_trigger}`);&amp;#10;    }&amp;#10;    if ((((((no_keys_pressed.slice((- 1))[0] &gt; no_keys_pressed.slice((- 2))[0]) || (key1_press_trigger === 1)) || (key2_press_trigger === 1)) || (key3_press_trigger === 1)) || (key4_press_trigger === 1))) {&amp;#10;        if (((keys.slice((- 1))[0].name === &quot;1&quot;) || (key1_press_trigger === 1))) {&amp;#10;            if ((curr_x &gt; ((- 75) / 100))) {&amp;#10;                key1_press_trigger = 1;&amp;#10;                if ((move_counter === 0)) {&amp;#10;                    last_x = curr_x;&amp;#10;                    time_at_press = globalClock.getTime();&amp;#10;                    update_timer = (time_at_press + interval);&amp;#10;                    move_counter = 1;&amp;#10;                }&amp;#10;                if ((move_timer.slice((- 1))[0] &lt; (time_at_press + isi))) {&amp;#10;                    move_timer.push(globalClock.getTime());&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= update_timer)) {&amp;#10;                        curr_x -= ((50 / 100) / (isi / interval));&amp;#10;                        update_timer += interval;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= (time_at_press + isi))) {&amp;#10;                        curr_x = (last_x - (50 / 100));&amp;#10;                        move_counter = 0;&amp;#10;                        key1_press_trigger = 0;&amp;#10;                        console.log(&quot;done moving 1&quot;);&amp;#10;                        psychoJS.experiment.nextEntry();&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_x&quot;, curr_x);&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_y&quot;, curr_y);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_rt_key&quot;, keys.slice((- 1))[0].rt);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_tglobal&quot;, globalClock.getTime());&amp;#10;                        psychoJS.experiment.addData(&quot;last_step_delay&quot;, isi);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        if (((keys.slice((- 1))[0].name === &quot;2&quot;) || (key2_press_trigger === 1))) {&amp;#10;            if ((curr_y &lt; (75 / 100))) {&amp;#10;                key2_press_trigger = 1;&amp;#10;                if ((move_counter === 0)) {&amp;#10;                    last_y = curr_y;&amp;#10;                    time_at_press = globalClock.getTime();&amp;#10;                    update_timer = (time_at_press + interval);&amp;#10;                    move_counter = 1;&amp;#10;                }&amp;#10;                if ((move_timer.slice((- 1))[0] &lt; (time_at_press + isi))) {&amp;#10;                    move_timer.push(globalClock.getTime());&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= update_timer)) {&amp;#10;                        curr_y += ((50 / 100) / (isi / interval));&amp;#10;                        update_timer += interval;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= (time_at_press + isi))) {&amp;#10;                        curr_y = (last_y + (50 / 100));&amp;#10;                        move_counter = 0;&amp;#10;                        key2_press_trigger = 0;&amp;#10;                        console.log(&quot;done moving 2&quot;);&amp;#10;                        psychoJS.experiment.nextEntry();&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_x&quot;, curr_x);&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_y&quot;, curr_y);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_rt_key&quot;, keys.slice((- 1))[0].rt);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_tglobal&quot;, globalClock.getTime());&amp;#10;                        psychoJS.experiment.addData(&quot;last_step_delay&quot;, isi);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        if (((keys.slice((- 1))[0].name === &quot;3&quot;) || (key3_press_trigger === 1))) {&amp;#10;            if ((curr_y &gt; ((- 75) / 100))) {&amp;#10;                key3_press_trigger = 1;&amp;#10;                if ((move_counter === 0)) {&amp;#10;                    last_y = curr_y;&amp;#10;                    time_at_press = globalClock.getTime();&amp;#10;                    update_timer = (time_at_press + interval);&amp;#10;                    move_counter = 1;&amp;#10;                }&amp;#10;                if ((move_timer.slice((- 1))[0] &lt; (time_at_press + isi))) {&amp;#10;                    move_timer.push(globalClock.getTime());&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= update_timer)) {&amp;#10;                        curr_y -= ((50 / 100) / (isi / interval));&amp;#10;                        update_timer += interval;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= (time_at_press + isi))) {&amp;#10;                        curr_y = (last_y - (50 / 100));&amp;#10;                        move_counter = 0;&amp;#10;                        key3_press_trigger = 0;&amp;#10;                        console.log(&quot;done moving 3&quot;);&amp;#10;                        psychoJS.experiment.nextEntry();&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_x&quot;, curr_x);&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_y&quot;, curr_y);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_rt_key&quot;, keys.slice((- 1))[0].rt);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_tglobal&quot;, globalClock.getTime());&amp;#10;                        psychoJS.experiment.addData(&quot;last_step_delay&quot;, isi);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        if (((keys.slice((- 1))[0].name === &quot;4&quot;) || (key4_press_trigger === 1))) {&amp;#10;            if ((curr_x &lt; (75 / 100))) {&amp;#10;                key4_press_trigger = 1;&amp;#10;                if ((move_counter === 0)) {&amp;#10;                    last_x = curr_x;&amp;#10;                    time_at_press = globalClock.getTime();&amp;#10;                    update_timer = (time_at_press + interval);&amp;#10;                    move_counter = 1;&amp;#10;                }&amp;#10;                if ((move_timer.slice((- 1))[0] &lt; (time_at_press + isi))) {&amp;#10;                    move_timer.push(globalClock.getTime());&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= update_timer)) {&amp;#10;                        curr_x += ((50 / 100) / (isi / interval));&amp;#10;                        update_timer += interval;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= (time_at_press + isi))) {&amp;#10;                        curr_x = (last_x + (50 / 100));&amp;#10;                        move_counter = 0;&amp;#10;                        key4_press_trigger = 0;&amp;#10;                        console.log(&quot;done moving 4&quot;);&amp;#10;                        psychoJS.experiment.nextEntry();&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_x&quot;, curr_x);&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_y&quot;, curr_y);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_rt_key&quot;, keys.slice((- 1))[0].rt);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_tglobal&quot;, globalClock.getTime());&amp;#10;                        psychoJS.experiment.addData(&quot;last_step_delay&quot;, isi);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        if (((curr_x === curr_rew_x) &amp;&amp; (curr_y === curr_rew_y))) {&amp;#10;            index_rew.push((index_rew.slice((- 1))[0] + 1));&amp;#10;            console.log(&quot;found reward&quot;);&amp;#10;            rew_visible = 1;&amp;#10;            msg = &quot;Well done! :)&quot;;&amp;#10;            psychoJS.experiment.addData(&quot;rew_loc_x&quot;, curr_rew_x);&amp;#10;            psychoJS.experiment.addData(&quot;rew_loc_y&quot;, curr_rew_y);&amp;#10;            psychoJS.experiment.addData(&quot;t_reward_start&quot;, globalClock.getTime());&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="resultTbl.saveAsWideText(result_name+'.csv', delim='auto')&amp;#10;resultTbl.saveAsPickle(result_name)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="task_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="sand_box">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/sand_3x3grid_box.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="sand_box" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="foot">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/footprints_buttons.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="foot" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(curr_x, curr_y)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.2, 0.26)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="reward">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/coin.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="reward" valType="code" updates="None" name="name"/>
        <Param val="rew_visible" valType="num" updates="set every frame" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(curr_rew_x, curr_rew_y)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.13)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="nav_key_task">
        <Param val="'1', '2', '3', '4'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="nav_key_task" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="all keys" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <KeyboardComponent name="break_key">
        <Param val="'0'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="break_key" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <PolygonComponent name="progressbar_background">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="0.0902, -0.4588, -0.8510" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="0.0902, -0.4588, -0.8510" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="progressbar_background" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.5, -0.21)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.1, 0.41)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="progress_bar">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="0.7098, 0.2941, -0.7490" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="progress_bar" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.5, -0.21)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.1, height_progress)" valType="list" updates="set every frame" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="reward_progress">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/coin.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="reward_progress" valType="code" updates="None" name="name"/>
        <Param val="rew_visible" valType="num" updates="set every frame" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.65, -0.21)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.1, 0.13)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="plus_coin_txt">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="plus_coin_txt" valType="code" updates="None" name="name"/>
        <Param val="rew_visible" valType="num" updates="set every frame" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.65, -0.3)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+1 coin" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="reward_A_feedback">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.07" valType="num" updates="constant" name="letterHeight"/>
        <Param val="reward_A_feedback" valType="code" updates="None" name="name"/>
        <Param val="A_visible" valType="num" updates="set every frame" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.5, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="&quot;Arrr! Ye've struck gold 1 of 4 with yer keen eye!&quot;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="0.4" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="new_rewards_prep">
      <ImageComponent name="new_rewards">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/sand_3x3grid_pirate_new.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="new_rewards" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="4" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="parrot_tip">
      <ImageComponent name="parrot">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/parrot_tip.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="parrot" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="4" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="feedback_screen">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="feedback_msg = ''" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="feedback_msg = &quot;&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="feedback_msg = `You were better than ${feedback}% of the candidates. Try to be even more precise and walk only the same routes to impress me!`;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="feedback_msg= f'You were better than {feedback}% of the candidates. Try to be even more precise and walk only the same routes to impress me!'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="background_feedback">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/pirate_withou_text.jpg" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="background_feedback" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="feedback_text">
        <Param val="-0.1765, -0.1765, -0.1765" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="feedback_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$feedback_msg" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="0.85" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="intro_0">
      <ImageComponent name="ship_intro_0">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/pirates.jpg" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="ship_intro_0" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.2" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.6)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Ahoy, landlubber!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="ship_box_intro_0">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/ship_box.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="ship_box_intro_0" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_intro_0">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_intro_0" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You have grown weary of life on land and decided to embark on an adventure, aiming to become a part of the renowned pirate crew aboard the majestic ship &quot;Sea Serpent's Fury.&quot; However, you face a minor setback, as there are several other candidates also vying to join the crew at the same time. To assess your treasure-hunting capabilities, the Captain Seraphina Storme has arranged a test for you and the other candidates.&amp;#10;&amp;#10;Press 1 to continue!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="next_intro_0">
        <Param val="'1'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="next_intro_0" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="intro_1">
      <ImageComponent name="ship_box_intro_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/ship_box.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="ship_box_intro_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_intro_1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_intro_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="On a secluded and sandy island, the captain will evaluate how well you can locate treasures hidden by the pirates. Depending on your performance, your chances of fulfilling your dream of becoming a true pirate will increase.&amp;#10;&amp;#10;You will be provided with one set of coordinates for the treasures, which you must find in a specific order. &amp;#10;&amp;#10;Press 1 to continue!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="next_intro_1">
        <Param val="'1'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="next_intro_1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="intro_2">
      <ImageComponent name="treasure_box_intro_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/map_w_txt.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="treasure_box_intro_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_intro_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_intro_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="To navigate through the sand, you can use the keys 1, 2, 3, and 4.&amp;#10;Please use your right hand so that your index finger (1) will take you left, your middle finger (2) moves you north, your ring finger (3) leads you south, and your little finger (4) guides you right.&amp;#10;&amp;#10;Press 1 to start the practice!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="next_intro_2">
        <Param val="'1'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="next_intro_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ImageComponent name="navigation_img">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/footprints_buttons.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="navigation_img" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.6)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.4, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="up_down_practice">
      <CodeComponent name="code_updown">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="curr_x = 0;&amp;#10;curr_y = 0;&amp;#10;all_locs_been_to = false;&amp;#10;nav_vert_key.clearEvents();&amp;#10;nav_vert_key.keys = [];&amp;#10;nav_vert_key.rt = [];&amp;#10;msg = &quot;&quot;;&amp;#10;if ((lower_isi &gt; 1)) {&amp;#10;    msg = &quot;Note that the steps now take more time. Get used to the timing!&quot;;&amp;#10;}&amp;#10;interval = 0.05;&amp;#10;move_timer = [];&amp;#10;move_timer.push(globalClock.getTime());&amp;#10;move_counter = 0;&amp;#10;time_at_press = globalClock.getTime();&amp;#10;key1_press_trigger = 0;&amp;#10;key2_press_trigger = 0;&amp;#10;key3_press_trigger = 0;&amp;#10;key4_press_trigger = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="curr_x = 0&amp;#10;curr_y = 0&amp;#10;&amp;#10;all_locs_been_to = False&amp;#10;locs_walked =[]&amp;#10;&amp;#10;no_keys_pressed = [0]&amp;#10;nav_vert_key.clearEvents()&amp;#10;nav_vert_key.keys = []&amp;#10;nav_vert_key.rt = []&amp;#10;&amp;#10;msg = &quot;Use your middle finger to go up and your ring finger to go down.&quot;&amp;#10;isi = 2.5&amp;#10;&amp;#10;&amp;#10;interval = 0.05&amp;#10;move_timer = []&amp;#10;move_timer.append(globalClock.getTime())&amp;#10;move_counter = 0&amp;#10;time_at_press = globalClock.getTime()&amp;#10;key1_press_trigger = 0&amp;#10;key2_press_trigger = 0&amp;#10;key3_press_trigger = 0&amp;#10;key4_press_trigger = 0&amp;#10;loopno = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="loopno += 1&amp;#10;&amp;#10;# first check if you practiced enough.&amp;#10;if all_locs_been_to == True:&amp;#10;    #wait(2)&amp;#10;    break&amp;#10;&amp;#10;isi = 2.5&amp;#10;&amp;#10;if (key2_press_trigger == 0) and (key3_press_trigger == 0):&amp;#10;    keys = nav_vert_key.getKeys(keyList = ['2', '3'], clear = False)&amp;#10;    no_keys_pressed.append(len(keys))&amp;#10;&amp;#10;print(f'whats up with the keys: key length is {len(keys)}, key 1 pressed {key2_press_trigger} {key3_press_trigger}')&amp;#10;&amp;#10;if len(keys) &gt; 0:&amp;#10;    # check if a new key has been pressed or if we are still updating the position.&amp;#10;    if (no_keys_pressed[-1] &gt; no_keys_pressed[-2]) or (key2_press_trigger == 1) or (key3_press_trigger == 1):&amp;#10;        # check which key has been pressed&amp;#10;        if (keys[-1].name == '2') or (key2_press_trigger == 1):&amp;#10;            if curr_y &lt; 29/100:&amp;#10;                key2_press_trigger = 1&amp;#10;                if move_counter == 0:&amp;#10;                    print('start moving up')&amp;#10;                    last_y = curr_y&amp;#10;                    time_at_press = globalClock.getTime()&amp;#10;                    update_timer = time_at_press + interval&amp;#10;                    move_counter = 1&amp;#10;                if move_timer[-1] &lt; time_at_press+isi:&amp;#10;                    move_timer.append(globalClock.getTime())&amp;#10;                    if move_timer[-1] &gt;= update_timer:&amp;#10;                        curr_y += ((28/100)/(isi/interval))&amp;#10;                        update_timer += interval #increment by 100ms&amp;#10;                elif move_timer[-1] &gt;= time_at_press+isi:&amp;#10;                    curr_y = last_y + 29/100&amp;#10;                    move_counter = 0&amp;#10;                    key2_press_trigger = 0&amp;#10;                    print('done moving 2')&amp;#10;                    direc = 'up'&amp;#10;                    # add the location to the location you walked.&amp;#10;                    locs_walked.append(curr_y)&amp;#10;                    msg = f&quot;Well done! You walked {direc}. Take some more steps!&quot;&amp;#10;                    # and save that you made a step.&amp;#10;                    thisExp.nextEntry()&amp;#10;                    thisExp.addData('curr_loc_x', curr_x)&amp;#10;                    thisExp.addData('curr_loc_y', curr_y)&amp;#10;                    thisExp.addData('t_step_from_start_currrun', keys[-1].rt)&amp;#10;                    thisExp.addData('t_step_tglobal', globalClock.getTime())&amp;#10;                    thisExp.addData('length_step', isi)&amp;#10;        # check which key had been pressed&amp;#10;        if (keys[-1].name == '3') or (key3_press_trigger == 1):&amp;#10;            print(f'current position is {curr_y}. It needs to be bigger than -29/100')&amp;#10;            if curr_y &gt; -29/100:&amp;#10;                key3_press_trigger = 1&amp;#10;                if move_counter == 0:&amp;#10;                    print('start moving down')&amp;#10;                    last_y = curr_y&amp;#10;                    time_at_press = globalClock.getTime()&amp;#10;                    update_timer = time_at_press + interval&amp;#10;                    print(f'update from now ({time_at_press}) until {time_at_press+isi}.')&amp;#10;                    move_counter = 1&amp;#10;                if move_timer[-1] &lt; time_at_press+isi:&amp;#10;                    move_timer.append(globalClock.getTime())&amp;#10;                    print(f'check if move timer works. should get to bigger then {time_at_press+isi} and then end step. Its now: {move_timer[-1]}')&amp;#10;                    if move_timer[-1] &gt;= update_timer:&amp;#10;                        curr_y -= ((28/100)/(isi/interval))&amp;#10;                        update_timer += interval #increment by 100ms&amp;#10;                elif move_timer[-1] &gt;= time_at_press+isi:&amp;#10;                    curr_y = last_y - 29/100&amp;#10;                    move_counter = 0&amp;#10;                    key3_press_trigger = 0&amp;#10;                    print('done moving 3')&amp;#10;                    direc = 'down'&amp;#10;                    # add the location to the location you walked.&amp;#10;                    locs_walked.append(curr_y)&amp;#10;                    msg = f&quot;Well done! You walked {direc}. Take some more steps!&quot;&amp;#10;                    # and save that you made a step.&amp;#10;                    thisExp.nextEntry()&amp;#10;                    thisExp.addData('curr_loc_x', curr_x)&amp;#10;                    thisExp.addData('curr_loc_y', curr_y)&amp;#10;                    thisExp.addData('t_step_from_start_currrun', keys[-1].rt)&amp;#10;                    thisExp.addData('t_step_tglobal', globalClock.getTime())&amp;#10;                    thisExp.addData('length_step', isi)&amp;#10;&amp;#10;# then check if you already walked along the whole line&amp;#10;if no_keys_pressed[-1] &gt; 10:&amp;#10;    print(f'you pressed {no_keys_pressed[-1]} keys.')&amp;#10;    all_locs_been_to = set([-29/100, 0, 29/100]).issubset(set(locs_walked))&amp;#10;    msg = f&quot;Nice! You seem to be comfortable walking along a vertical line.&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="loopno += 1;&amp;#10;if ((loopno &lt; 5)) {&amp;#10;    nav_vert_key.clearEvents();&amp;#10;    nav_vert_key.keys = [];&amp;#10;    nav_vert_key.rt = [];&amp;#10;}&amp;#10;if ((all_locs_been_to === true)) {&amp;#10;    break;&amp;#10;}&amp;#10;isi = upper_isi;&amp;#10;if (((key1_press_trigger === 0) &amp;&amp; (key4_press_trigger === 0))) {&amp;#10;    keys = nav_vert_key.getKeys({&quot;keyList&quot;: [&quot;3&quot;, &quot;2&quot;], &quot;clear&quot;: false});&amp;#10;    no_keys_pressed.push(keys.length);&amp;#10;}&amp;#10;if ((keys.length &gt; 0)) {&amp;#10;    if ((((no_keys_pressed.slice((- 1))[0] &gt; no_keys_pressed.slice((- 2))[0]) || (key2_press_trigger === 1)) || (key3_press_trigger === 1))) {&amp;#10;        if (((keys.slice((- 1))[0].name === &quot;2&quot;) || (key2_press_trigger === 1))) {&amp;#10;            if ((curr_y &lt; (75 / 100))) {&amp;#10;                key2_press_trigger = 1;&amp;#10;                if ((move_counter === 0)) {&amp;#10;                    last_y = curr_y;&amp;#10;                    time_at_press = globalClock.getTime();&amp;#10;                    update_timer = (time_at_press + interval);&amp;#10;                    move_counter = 1;&amp;#10;                }&amp;#10;                if ((move_timer.slice((- 1))[0] &lt; (time_at_press + isi))) {&amp;#10;                    move_timer.push(globalClock.getTime());&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= update_timer)) {&amp;#10;                        curr_y += ((50 / 100) / (isi / interval));&amp;#10;                        update_timer += interval;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= (time_at_press + isi))) {&amp;#10;                        curr_y = (last_y + (50 / 100));&amp;#10;                        move_counter = 0;&amp;#10;                        key2_press_trigger = 0;&amp;#10;                        console.log(&quot;done moving 2&quot;);&amp;#10;                        direc = &quot;up&quot;;&amp;#10;                        locs_walked.push(curr_y);&amp;#10;                        msg = `Well done! You walked ${direc}. Take some more steps!`;&amp;#10;                        if ((lower_isi &gt; 1)) {&amp;#10;                            msg = &quot;Of course, sand makes it hard to walk. Take some more steps under realistic circumstances!&quot;;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        if (((keys.slice((- 1))[0].name === &quot;3&quot;) || (key3_press_trigger === 1))) {&amp;#10;            if ((curr_y &gt; ((- 75) / 100))) {&amp;#10;                key3_press_trigger = 1;&amp;#10;                if ((move_counter === 0)) {&amp;#10;                    last_y = curr_y;&amp;#10;                    time_at_press = globalClock.getTime();&amp;#10;                    update_timer = (time_at_press + interval);&amp;#10;                    move_counter = 1;&amp;#10;                }&amp;#10;                if ((move_timer.slice((- 1))[0] &lt; (time_at_press + isi))) {&amp;#10;                    move_timer.push(globalClock.getTime());&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= update_timer)) {&amp;#10;                        curr_y -= ((50 / 100) / (isi / interval));&amp;#10;                        update_timer += interval;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= (time_at_press + isi))) {&amp;#10;                        curr_y = (last_y - (50 / 100));&amp;#10;                        move_counter = 0;&amp;#10;                        key3_press_trigger = 0;&amp;#10;                        console.log(&quot;done moving 3&quot;);&amp;#10;                        direc = &quot;down&quot;;&amp;#10;                        locs_walked.push(curr_y);&amp;#10;                        msg = `Well done! You walked ${direc}. Take some more steps!`;&amp;#10;                        if ((lower_isi &gt; 1)) {&amp;#10;                            msg = &quot;Of course, sand makes it hard to walk. Take some more steps under realistic circumstances!&quot;;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((no_keys_pressed.slice((- 1))[0] &gt; 10)) {&amp;#10;    all_locs_been_to = set([((- 75) / 100), ((- 25) / 100), (25 / 100), (75 / 100)]).issubset(set(locs_walked));&amp;#10;    msg = `Nice! You seem to be comfortable walking along a vertical line.`;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_updown" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="parrot_updown_empty">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/parrot_no_txt.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="parrot_updown_empty" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="help_txt_updown">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="help_txt_updown" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="'Arrrr! You look like my favorite future pirate. I will help you!'" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="updown_pract">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/updown_parrot.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="updown_pract" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="feedback_updown_txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="feedback_updown_txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="nav_vert_key">
        <Param val="'2','3'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="nav_vert_key" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ImageComponent name="foot_vert">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/footprints_buttons.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="foot_vert" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(curr_x, curr_y)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.2, 0.26)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="left_right_practice">
      <CodeComponent name="code_leftright">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="curr_x = 0;&amp;#10;curr_y = 0;&amp;#10;all_locs_been_to = false;&amp;#10;locs_walked = [];&amp;#10;no_keys_pressed = [0];&amp;#10;nav_horz_key.clearEvents();&amp;#10;nav_horz_key.keys = [];&amp;#10;nav_horz_key.rt = [];&amp;#10;msg = &quot;Use your little finger to go left and your index finger to go right.&quot;;&amp;#10;isi = 2.5;&amp;#10;interval = 0.05;&amp;#10;move_timer = [];&amp;#10;move_timer.push(globalClock.getTime());&amp;#10;move_counter = 0;&amp;#10;time_at_press = globalClock.getTime();&amp;#10;key1_press_trigger = 0;&amp;#10;key2_press_trigger = 0;&amp;#10;key3_press_trigger = 0;&amp;#10;key4_press_trigger = 0;&amp;#10;loopno = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="curr_x = 0&amp;#10;curr_y = 0&amp;#10;&amp;#10;all_locs_been_to = False&amp;#10;locs_walked =[]&amp;#10;&amp;#10;no_keys_pressed = [0]&amp;#10;nav_horz_key.clearEvents()&amp;#10;nav_horz_key.keys = []&amp;#10;nav_horz_key.rt = []&amp;#10;&amp;#10;msg = &quot;Use your little finger to go left and your index finger to go right.&quot;&amp;#10;isi = 2.5&amp;#10;&amp;#10;&amp;#10;interval = 0.05&amp;#10;move_timer = []&amp;#10;move_timer.append(globalClock.getTime())&amp;#10;move_counter = 0&amp;#10;time_at_press = globalClock.getTime()&amp;#10;key1_press_trigger = 0&amp;#10;key2_press_trigger = 0&amp;#10;key3_press_trigger = 0&amp;#10;key4_press_trigger = 0&amp;#10;loopno = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="loopno += 1&amp;#10;&amp;#10;# first check if you practiced enough.&amp;#10;if all_locs_been_to == True:&amp;#10;    #wait(2)&amp;#10;    break&amp;#10;&amp;#10;isi = 2.5&amp;#10;&amp;#10;if (key1_press_trigger == 0) and (key4_press_trigger == 0):&amp;#10;    keys = nav_horz_key.getKeys(keyList = ['1', '4'], clear = False)&amp;#10;    no_keys_pressed.append(len(keys))&amp;#10;    &amp;#10;if len(keys) &gt; 0:&amp;#10;    # check if a new key has been pressed or if we are still updating the position.&amp;#10;    if (no_keys_pressed[-1] &gt; no_keys_pressed[-2]) or (key1_press_trigger == 1) or (key4_press_trigger == 1):&amp;#10;        # check which key has been pressed&amp;#10;        if (keys[-1].name == '1') or (key1_press_trigger == 1):&amp;#10;            if curr_x &gt; -21/100:&amp;#10;                key1_press_trigger = 1&amp;#10;                if move_counter == 0:&amp;#10;                    last_x = curr_x&amp;#10;                    time_at_press = globalClock.getTime()&amp;#10;                    update_timer = time_at_press + interval&amp;#10;                    move_counter = 1&amp;#10;                if move_timer[-1] &lt; time_at_press+isi:&amp;#10;                    move_timer.append(globalClock.getTime())&amp;#10;                    if move_timer[-1] &gt;= update_timer:&amp;#10;                        curr_x -= ((20/100)/(isi/interval))&amp;#10;                        update_timer += interval #increment by 100ms&amp;#10;                elif move_timer[-1] &gt;= time_at_press+isi:&amp;#10;                    curr_x = last_x - 21/100&amp;#10;                    move_counter = 0&amp;#10;                    key1_press_trigger = 0&amp;#10;                    direc = 'to the left'&amp;#10;                    # add the location to the location you walked.&amp;#10;                    locs_walked.append(curr_x)&amp;#10;                    msg = f&quot;Well done! You walked {direc}. Take some more steps!&quot;&amp;#10;                    # and save that you made a step.&amp;#10;                    thisExp.nextEntry()&amp;#10;                    thisExp.addData('curr_loc_x', curr_x)&amp;#10;                    thisExp.addData('curr_loc_y', curr_y)&amp;#10;                    thisExp.addData('t_step_from_start_currrun', keys[-1].rt)&amp;#10;                    thisExp.addData('t_step_tglobal', globalClock.getTime())&amp;#10;                    thisExp.addData('length_step', isi)&amp;#10;        # check which key had been pressed&amp;#10;        if (keys[-1].name == '4') or (key4_press_trigger == 1):&amp;#10;            if curr_x &lt; 21/100:&amp;#10;                key4_press_trigger = 1&amp;#10;                if move_counter == 0:&amp;#10;                    last_x = curr_x&amp;#10;                    time_at_press = globalClock.getTime()&amp;#10;                    update_timer = time_at_press + interval&amp;#10;                    move_counter = 1&amp;#10;                if move_timer[-1] &lt; time_at_press+isi:&amp;#10;                    move_timer.append(globalClock.getTime())&amp;#10;                    if move_timer[-1] &gt;= update_timer:&amp;#10;                        curr_x += ((20/100)/(isi/interval))&amp;#10;                        update_timer += interval&amp;#10;                elif move_timer[-1] &gt;= time_at_press+isi:&amp;#10;                    curr_x = last_x + 21/100&amp;#10;                    move_counter = 0&amp;#10;                    key4_press_trigger = 0&amp;#10;                    direc = 'to the right'&amp;#10;                    # add the location to the location you walked.&amp;#10;                    locs_walked.append(curr_x)&amp;#10;                    msg = f&quot;Well done! You walked {direc}. Take some more steps!&quot;&amp;#10;                    # and save that you made a step.&amp;#10;                    thisExp.nextEntry()&amp;#10;                    thisExp.addData('curr_loc_x', curr_x)&amp;#10;                    thisExp.addData('curr_loc_y', curr_y)&amp;#10;                    thisExp.addData('t_step_from_start_currrun', keys[-1].rt)&amp;#10;                    thisExp.addData('t_step_tglobal', globalClock.getTime())&amp;#10;                    thisExp.addData('length_step', isi)&amp;#10;&amp;#10;# then check if you already walked along the whole line&amp;#10;if no_keys_pressed[-1] &gt; 10:&amp;#10;    print(f'you pressed {no_keys_pressed[-1]} keys.')&amp;#10;    all_locs_been_to = set([-21/100, 0, 21/100]).issubset(set(locs_walked))&amp;#10;    msg = f&quot;Nice! You seem to be comfortable walking along a horizontal line.&quot;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="loopno += 1;&amp;#10;if ((all_locs_been_to === true)) {&amp;#10;    break;&amp;#10;}&amp;#10;isi = 2.5;&amp;#10;if (((key2_press_trigger === 0) &amp;&amp; (key3_press_trigger === 0))) {&amp;#10;    keys = nav_vert_key.getKeys({&quot;keyList&quot;: [&quot;2&quot;, &quot;3&quot;], &quot;clear&quot;: false});&amp;#10;    no_keys_pressed.push(keys.length);&amp;#10;}&amp;#10;console.log(`whats up with the keys: key length is ${keys.length}, key 1 pressed ${key2_press_trigger} ${key3_press_trigger}`);&amp;#10;if ((keys.length &gt; 0)) {&amp;#10;    if ((((no_keys_pressed.slice((- 1))[0] &gt; no_keys_pressed.slice((- 2))[0]) || (key2_press_trigger === 1)) || (key3_press_trigger === 1))) {&amp;#10;        if (((keys.slice((- 1))[0].name === &quot;2&quot;) || (key2_press_trigger === 1))) {&amp;#10;            if ((curr_y &lt; (29 / 100))) {&amp;#10;                key2_press_trigger = 1;&amp;#10;                if ((move_counter === 0)) {&amp;#10;                    console.log(&quot;start moving up&quot;);&amp;#10;                    last_y = curr_y;&amp;#10;                    time_at_press = globalClock.getTime();&amp;#10;                    update_timer = (time_at_press + interval);&amp;#10;                    move_counter = 1;&amp;#10;                }&amp;#10;                if ((move_timer.slice((- 1))[0] &lt; (time_at_press + isi))) {&amp;#10;                    move_timer.push(globalClock.getTime());&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= update_timer)) {&amp;#10;                        curr_y += ((28 / 100) / (isi / interval));&amp;#10;                        update_timer += interval;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= (time_at_press + isi))) {&amp;#10;                        curr_y = (last_y + (29 / 100));&amp;#10;                        move_counter = 0;&amp;#10;                        key2_press_trigger = 0;&amp;#10;                        console.log(&quot;done moving 2&quot;);&amp;#10;                        direc = &quot;up&quot;;&amp;#10;                        locs_walked.push(curr_y);&amp;#10;                        msg = `Well done! You walked ${direc}. Take some more steps!`;&amp;#10;                        psychoJS.experiment.nextEntry();&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_x&quot;, curr_x);&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_y&quot;, curr_y);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_from_start_currrun&quot;, keys.slice((- 1))[0].rt);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_tglobal&quot;, globalClock.getTime());&amp;#10;                        psychoJS.experiment.addData(&quot;length_step&quot;, isi);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        if (((keys.slice((- 1))[0].name === &quot;3&quot;) || (key3_press_trigger === 1))) {&amp;#10;            console.log(`current position is ${curr_y}. It needs to be bigger than -29/100`);&amp;#10;            if ((curr_y &gt; ((- 29) / 100))) {&amp;#10;                key3_press_trigger = 1;&amp;#10;                if ((move_counter === 0)) {&amp;#10;                    console.log(&quot;start moving down&quot;);&amp;#10;                    last_y = curr_y;&amp;#10;                    time_at_press = globalClock.getTime();&amp;#10;                    update_timer = (time_at_press + interval);&amp;#10;                    console.log(`update from now (${time_at_press}) until ${(time_at_press + isi)}.`);&amp;#10;                    move_counter = 1;&amp;#10;                }&amp;#10;                if ((move_timer.slice((- 1))[0] &lt; (time_at_press + isi))) {&amp;#10;                    move_timer.push(globalClock.getTime());&amp;#10;                    console.log(`check if move timer works. should get to bigger then ${(time_at_press + isi)} and then end step. Its now: ${move_timer.slice((- 1))[0]}`);&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= update_timer)) {&amp;#10;                        curr_y -= ((28 / 100) / (isi / interval));&amp;#10;                        update_timer += interval;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((move_timer.slice((- 1))[0] &gt;= (time_at_press + isi))) {&amp;#10;                        curr_y = (last_y - (29 / 100));&amp;#10;                        move_counter = 0;&amp;#10;                        key3_press_trigger = 0;&amp;#10;                        console.log(&quot;done moving 3&quot;);&amp;#10;                        direc = &quot;down&quot;;&amp;#10;                        locs_walked.push(curr_y);&amp;#10;                        msg = `Well done! You walked ${direc}. Take some more steps!`;&amp;#10;                        psychoJS.experiment.nextEntry();&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_x&quot;, curr_x);&amp;#10;                        psychoJS.experiment.addData(&quot;curr_loc_y&quot;, curr_y);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_from_start_currrun&quot;, keys.slice((- 1))[0].rt);&amp;#10;                        psychoJS.experiment.addData(&quot;t_step_tglobal&quot;, globalClock.getTime());&amp;#10;                        psychoJS.experiment.addData(&quot;length_step&quot;, isi);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((no_keys_pressed.slice((- 1))[0] &gt; 10)) {&amp;#10;    console.log(`you pressed ${no_keys_pressed.slice((- 1))[0]} keys.`);&amp;#10;    all_locs_been_to = set([((- 29) / 100), 0, (29 / 100)]).issubset(set(locs_walked));&amp;#10;    msg = `Nice! You seem to be comfortable walking along a vertical line.`;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_leftright" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="left_right_pract">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/leftright_parrot.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_right_pract" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="foot_leftright">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/footprints_buttons.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="foot_leftright" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(curr_x, curr_y)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.2, 0.26)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="intro_leftright">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="intro_leftright" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="4.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="'Arrrr! Well done! Now walk to the left and to the right.'" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="feedback_leftright">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="feedback_leftright" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="4.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="nav_horz_key">
        <Param val="'1', '4'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="nav_horz_key" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="4.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="all keys" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="summary_intro">
      <ImageComponent name="summary_parrot">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/summary_parrot.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="summary_parrot" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2,2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="next_summary_key">
        <Param val="'1'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="next_summary_key" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="intro_0"/>
    <Routine name="intro_1"/>
    <Routine name="intro_2"/>
    <Routine name="up_down_practice"/>
    <Routine name="left_right_practice"/>
    <Routine name="summary_intro"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'Round': 0, 'lower_isi': 1.5, 'upper_isi': 2, 'rew_x_A': 0.21, 'rew_y_A': 0.29, 'rew_x_B': 0.21, 'rew_y_B': -0.29, 'rew_x_C': 0, 'rew_y_C': 0, 'rew_x_D': -0.21, 'rew_y_D': 0.29, 'height_progress': 0, 'feedback': 34, 'reps_per_run': 10}, {'Round': 1, 'lower_isi': 1.5, 'upper_isi': 2, 'rew_x_A': 0, 'rew_y_A': -0.29, 'rew_x_B': -0.21, 'rew_y_B': 0, 'rew_x_C': 0, 'rew_y_C': 0.29, 'rew_x_D': 0.21, 'rew_y_D': 0, 'height_progress': 0, 'feedback': 48, 'reps_per_run': 10}, {'Round': 2, 'lower_isi': 1.5, 'upper_isi': 2, 'rew_x_A': -0.21, 'rew_y_A': 0, 'rew_x_B': 0, 'rew_y_B': 0.29, 'rew_x_C': 0.21, 'rew_y_C': 0, 'rew_x_D': 0, 'rew_y_D': -0.29, 'height_progress': 0, 'feedback': 46, 'reps_per_run': 8}, {'Round': 3, 'lower_isi': 1.5, 'upper_isi': 2, 'rew_x_A': -0.21, 'rew_y_A': -0.29, 'rew_x_B': 0.21, 'rew_y_B': 0.29, 'rew_x_C': 0.21, 'rew_y_C': -0.29, 'rew_x_D': 0, 'rew_y_D': 0.29, 'height_progress': 0, 'feedback': 53, 'reps_per_run': 8}, {'Round': 4, 'lower_isi': 1.5, 'upper_isi': 2, 'rew_x_A': -0.21, 'rew_y_A': 0.29, 'rew_x_B': 0.21, 'rew_y_B': 0.29, 'rew_x_C': 0.21, 'rew_y_C': -0.29, 'rew_x_D': -0.21, 'rew_y_D': -0.29, 'height_progress': 0, 'feedback': 57, 'reps_per_run': 6}, {'Round': 5, 'lower_isi': 1.5, 'upper_isi': 2, 'rew_x_A': -0.21, 'rew_y_A': 0.29, 'rew_x_B': 0, 'rew_y_B': 0, 'rew_x_C': 0.21, 'rew_y_C': -0.29, 'rew_x_D': 0.21, 'rew_y_D': 0.29, 'height_progress': 0, 'feedback': 55, 'reps_per_run': 6}, {'Round': 6, 'lower_isi': 1.5, 'upper_isi': 2, 'rew_x_A': 0.21, 'rew_y_A': -0.29, 'rew_x_B': 0, 'rew_y_B': 0.29, 'rew_x_C': -0.21, 'rew_y_C': 0, 'rew_x_D': 0, 'rew_y_D': -0.29, 'height_progress': 0, 'feedback': 59, 'reps_per_run': 4}, {'Round': 7, 'lower_isi': 1.5, 'upper_isi': 2, 'rew_x_A': 0, 'rew_y_A': -0.29, 'rew_x_B': 0.21, 'rew_y_B': 0, 'rew_x_C': 0, 'rew_y_C': 0.29, 'rew_x_D': -0.21, 'rew_y_D': 0, 'height_progress': 0, 'feedback': 63, 'reps_per_run': 4}, {'Round': 8, 'lower_isi': 1.5, 'upper_isi': 2, 'rew_x_A': 0, 'rew_y_A': 0.29, 'rew_x_B': 0.21, 'rew_y_B': -0.29, 'rew_x_C': 0.21, 'rew_y_C': 0.29, 'rew_x_D': -0.21, 'rew_y_D': -0.29, 'height_progress': 0, 'feedback': 66, 'reps_per_run': 2}, {'Round': 9, 'lower_isi': 1.5, 'upper_isi': 2, 'rew_x_A': -0.21, 'rew_y_A': -0.29, 'rew_x_B': 0.21, 'rew_y_B': -0.29, 'rew_x_C': 0.21, 'rew_y_C': 0.29, 'rew_x_D': -0.21, 'rew_y_D': 0.29, 'height_progress': 0, 'feedback': 68, 'reps_per_run': 2}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="pract_cond_3x3.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="new_rewards_prep"/>
    <Routine name="parrot_tip"/>
    <Routine name="show_rewards"/>
    <LoopInitiator loopType="TrialHandler" name="rep_runs">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="reps_per_run" valType="num"/>
      <Param name="name" updates="None" val="rep_runs" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="task"/>
    <LoopTerminator name="rep_runs"/>
    <Routine name="feedback_screen"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
